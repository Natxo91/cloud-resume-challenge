AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  cloud-resume-challenge

  Sample SAM Template for cloud-resume-challenge

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Parameters:
  HostedZoneParameter:
    Type: String
    Description: Hosted Zone ID
    Default: Z0528804248IT3C0RZLEH
  DomainNameParameter:
    Type: String
    Description: domain name 
    Default: ignaciolarranaga.com

Resources:
  Mywebsite:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
      BucketName: myawsbucket-resume-page
      
  CloudfrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "!Sub Static assets in ${AWS::StackName}"
      
  MyRoute53Record:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: 
        Ref: HostedZoneParameter 
      RecordSets:
        - Name: 
            Ref: DomainNameParameter 
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt MyDistribution.DomainName
  
  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloud-resume-challenge
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"
  
  
  MyCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: 
        Ref: DomainNameParameter # TODO: Don't hardcode me
      DomainValidationOptions:
            - DomainName: 
                Ref: DomainNameParameter
              HostedZoneId: 
                Ref: HostedZoneParameter
      ValidationMethod: DNS 
  
  
  MyDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        ViewerCertificate:
          AcmCertificateArn: !Ref MyCertificate
          SslSupportMethod: sni-only
        Aliases:
          - Ref: DomainNameParameter # TODO: Don't hardcode me
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: myawsbucket-resume-page.s3-website-us-east-1.amazonaws.com
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
        Origins:
          - DomainName: myawsbucket-resume-page.s3-website-us-east-1.amazonaws.com
            Id: myawsbucket-resume-page.s3-website-us-east-1.amazonaws.com
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 60
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - Ref: CloudfrontOAI
        Enabled: "true"
        DefaultRootObject: index.html
  
  
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudfrontOAI
    Properties:
      Bucket: !Ref Mywebsite
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Join
              - ""
              - - !GetAtt Mywebsite.Arn
                - "/*"
            Principal:
              CanonicalUser: !GetAtt CloudfrontOAI.S3CanonicalUserId
  
  
  GetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Policies:
      - DynamoDBCrudPolicy:
          TableName: cloud-resume-challenge
      CodeUri: get-function/
      Handler: app.getfunction
      Runtime: python3.9
      Tracing: Active
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /get
            Method: get
            
  
  PutFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Policies:
      - DynamoDBCrudPolicy:
          TableName: cloud-resume-challenge
      CodeUri: put-function/
      Handler: app.putfunction
      Runtime: python3.9
      Tracing: Active
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /put
            Method: get

#Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  GetApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get/"
#  GetFunction:
#    Description: "Get Function"
#    Value: !GetAtt GetFunction.Arn
#  GetFunctionIamRole:
#    Description: "Implicit IAM Role created for get function"
#    Value: !GetAtt GetFunctionRole.Arn
#  PutApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/put/"
#  PutFunction:
#    Description: "Put Function"
#    Value: !GetAtt PutFunction.Arn
#  PutFunctionIamRole:
#    Description: "Implicit IAM Role created for put function"
#    Value: !GetAtt PutFunctionRole.Arn
